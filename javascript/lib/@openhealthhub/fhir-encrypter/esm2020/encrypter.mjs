import { EncryptService } from './service/encrypt.service';
import { ParticipantKeyService } from './service/participant-key.service';
import { QuestionnaireResponseService } from './service/questionnaire-response.service';
export async function encryptQuestionnaireResponse(response, practitioners = []) {
    const bundle = { resourceType: 'Bundle', type: 'transaction' };
    bundle.entry = await Promise.all(practitioners.map(async (practitioner) => {
        const entry = {};
        entry.resource = await encryptForKey(response, practitioner);
        return entry;
    }));
    return bundle;
}
const encryptForKey = async (response, practitioner) => {
    const key = new ParticipantKeyService().toParticipantKey(practitioner);
    const encryptService = new EncryptService();
    await encryptService.loadKey(key);
    const qrService = new QuestionnaireResponseService(encryptService, key);
    return qrService.createEncryptedResponse(response);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9lbmNyeXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBRXRGLE1BQU0sQ0FBQyxLQUFLLFVBQVUsNEJBQTRCLENBQUMsUUFBeUMsRUFDekMsZ0JBQWdDLEVBQUU7SUFDbkYsTUFBTSxNQUFNLEdBQVcsRUFBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUMsQ0FBQztJQUNyRSxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBQyxZQUFZLEVBQUMsRUFBRTtRQUN0RSxNQUFNLEtBQUssR0FBZ0IsRUFBRSxDQUFDO1FBQzlCLEtBQUssQ0FBQyxRQUFRLEdBQUcsTUFBTSxhQUFhLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRTdELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQUUsUUFBeUMsRUFBRSxZQUEwQixFQUFrQyxFQUFFO0lBQ3BJLE1BQU0sR0FBRyxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2RSxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0lBQzVDLE1BQU0sY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLDRCQUE0QixDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUV4RSxPQUFPLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0J1bmRsZSwgQnVuZGxlRW50cnksIFByYWN0aXRpb25lciwgUXVlc3Rpb25uYWlyZVJlc3BvbnNlfSBmcm9tICdmaGlyL3I0JztcbmltcG9ydCB7RW5jcnlwdFNlcnZpY2V9IGZyb20gJy4vc2VydmljZS9lbmNyeXB0LnNlcnZpY2UnO1xuaW1wb3J0IHtQYXJ0aWNpcGFudEtleVNlcnZpY2V9IGZyb20gJy4vc2VydmljZS9wYXJ0aWNpcGFudC1rZXkuc2VydmljZSc7XG5pbXBvcnQge1F1ZXN0aW9ubmFpcmVSZXNwb25zZVNlcnZpY2V9IGZyb20gJy4vc2VydmljZS9xdWVzdGlvbm5haXJlLXJlc3BvbnNlLnNlcnZpY2UnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jcnlwdFF1ZXN0aW9ubmFpcmVSZXNwb25zZShyZXNwb25zZTogUmVhZG9ubHk8UXVlc3Rpb25uYWlyZVJlc3BvbnNlPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByYWN0aXRpb25lcnM6IFByYWN0aXRpb25lcltdID0gW10pOiBQcm9taXNlPEJ1bmRsZT4ge1xuICBjb25zdCBidW5kbGU6IEJ1bmRsZSA9IHtyZXNvdXJjZVR5cGU6ICdCdW5kbGUnLCB0eXBlOiAndHJhbnNhY3Rpb24nfTtcbiAgYnVuZGxlLmVudHJ5ID0gYXdhaXQgUHJvbWlzZS5hbGwocHJhY3RpdGlvbmVycy5tYXAoYXN5bmMgcHJhY3RpdGlvbmVyID0+IHtcbiAgICBjb25zdCBlbnRyeTogQnVuZGxlRW50cnkgPSB7fTtcbiAgICBlbnRyeS5yZXNvdXJjZSA9IGF3YWl0IGVuY3J5cHRGb3JLZXkocmVzcG9uc2UsIHByYWN0aXRpb25lcik7XG5cbiAgICByZXR1cm4gZW50cnk7XG4gIH0pKTtcblxuICByZXR1cm4gYnVuZGxlO1xufVxuXG5jb25zdCBlbmNyeXB0Rm9yS2V5ID0gYXN5bmMgKHJlc3BvbnNlOiBSZWFkb25seTxRdWVzdGlvbm5haXJlUmVzcG9uc2U+LCBwcmFjdGl0aW9uZXI6IFByYWN0aXRpb25lcik6IFByb21pc2U8UXVlc3Rpb25uYWlyZVJlc3BvbnNlPiA9PiB7XG4gIGNvbnN0IGtleSA9IG5ldyBQYXJ0aWNpcGFudEtleVNlcnZpY2UoKS50b1BhcnRpY2lwYW50S2V5KHByYWN0aXRpb25lcik7XG4gIGNvbnN0IGVuY3J5cHRTZXJ2aWNlID0gbmV3IEVuY3J5cHRTZXJ2aWNlKCk7XG4gIGF3YWl0IGVuY3J5cHRTZXJ2aWNlLmxvYWRLZXkoa2V5KTtcbiAgY29uc3QgcXJTZXJ2aWNlID0gbmV3IFF1ZXN0aW9ubmFpcmVSZXNwb25zZVNlcnZpY2UoZW5jcnlwdFNlcnZpY2UsIGtleSk7XG5cbiAgcmV0dXJuIHFyU2VydmljZS5jcmVhdGVFbmNyeXB0ZWRSZXNwb25zZShyZXNwb25zZSk7XG59O1xuIl19