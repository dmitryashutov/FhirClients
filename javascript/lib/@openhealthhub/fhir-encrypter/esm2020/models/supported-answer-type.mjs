export var SupportedAnswerType;
(function (SupportedAnswerType) {
    SupportedAnswerType["STRING"] = "STRING";
    SupportedAnswerType["DECIMAL"] = "DECIMAL";
    SupportedAnswerType["DATE"] = "DATE";
    SupportedAnswerType["ATTACHMENT"] = "ATTACHMENT";
    SupportedAnswerType["CODING"] = "CODING";
})(SupportedAnswerType || (SupportedAnswerType = {}));
export const getValueForType = (answer, typeString) => {
    const type = SupportedAnswerType[typeString];
    switch (type) {
        case SupportedAnswerType.ATTACHMENT:
            return answer.valueAttachment?.data;
        case SupportedAnswerType.DECIMAL:
            return answer.valueDecimal;
        case SupportedAnswerType.DATE:
            return answer.valueDate;
        case SupportedAnswerType.STRING:
            return answer.valueString;
        case SupportedAnswerType.CODING:
            return answer.valueCoding;
        default:
            throw new Error('programming error, forgot to add new SupportedAnswerType');
    }
};
const getFieldNameForType = (type, answer) => {
    const key = `value${type.charAt(0).toUpperCase() + type.slice(1).toLowerCase()}`;
    return key;
};
export const getAnswerType = (answer) => {
    for (const type in SupportedAnswerType) {
        const fieldName = getFieldNameForType(type, answer);
        if (fieldName && answer[fieldName]) {
            return type;
        }
    }
    throw new Error(`answer set, but using unsupported value, supported values are: [${Object.values(SupportedAnswerType).join(', ')}]`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydGVkLWFuc3dlci10eXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9tb2RlbHMvc3VwcG9ydGVkLWFuc3dlci10eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBTixJQUFZLG1CQU1YO0FBTkQsV0FBWSxtQkFBbUI7SUFDN0Isd0NBQWlCLENBQUE7SUFDakIsMENBQW1CLENBQUE7SUFDbkIsb0NBQWEsQ0FBQTtJQUNiLGdEQUF5QixDQUFBO0lBQ3pCLHdDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFOVyxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBTTlCO0FBRUQsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsTUFBdUMsRUFDdkMsVUFBNEMsRUFBd0MsRUFBRTtJQUNwSCxNQUFNLElBQUksR0FBRyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssbUJBQW1CLENBQUMsVUFBVTtZQUNqQyxPQUFPLE1BQU0sQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDO1FBQ3RDLEtBQUssbUJBQW1CLENBQUMsT0FBTztZQUM5QixPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDN0IsS0FBSyxtQkFBbUIsQ0FBQyxJQUFJO1lBQzNCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUMxQixLQUFLLG1CQUFtQixDQUFDLE1BQU07WUFDN0IsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQzVCLEtBQUssbUJBQW1CLENBQUMsTUFBTTtZQUM3QixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDNUI7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7S0FDL0U7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLG1CQUFtQixHQUFHLENBQUMsSUFBWSxFQUFFLE1BQXVDLEVBQXlDLEVBQUU7SUFDM0gsTUFBTSxHQUFHLEdBQUcsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztJQUVqRixPQUFPLEdBQTRDLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBdUMsRUFBb0MsRUFBRTtJQUN6RyxLQUFLLE1BQU0sSUFBSSxJQUFJLG1CQUFtQixFQUFFO1FBQ3RDLE1BQU0sU0FBUyxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFJLFNBQVMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxJQUF3QyxDQUFDO1NBQ2pEO0tBQ0Y7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2SSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvZGluZywgUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFuc3dlcn0gZnJvbSAnZmhpci9yNCc7XG5cbmV4cG9ydCBlbnVtIFN1cHBvcnRlZEFuc3dlclR5cGUge1xuICBTVFJJTkcgPSAnU1RSSU5HJyxcbiAgREVDSU1BTCA9ICdERUNJTUFMJyxcbiAgREFURSA9ICdEQVRFJyxcbiAgQVRUQUNITUVOVCA9ICdBVFRBQ0hNRU5UJyxcbiAgQ09ESU5HID0gJ0NPRElORycsXG59XG5cbmV4cG9ydCBjb25zdCBnZXRWYWx1ZUZvclR5cGUgPSAoYW5zd2VyOiBRdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtQW5zd2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlU3RyaW5nOiBrZXlvZiB0eXBlb2YgU3VwcG9ydGVkQW5zd2VyVHlwZSk6IHN0cmluZyB8IG51bWJlciB8IENvZGluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IHR5cGUgPSBTdXBwb3J0ZWRBbnN3ZXJUeXBlW3R5cGVTdHJpbmddO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFN1cHBvcnRlZEFuc3dlclR5cGUuQVRUQUNITUVOVDpcbiAgICAgIHJldHVybiBhbnN3ZXIudmFsdWVBdHRhY2htZW50Py5kYXRhO1xuICAgIGNhc2UgU3VwcG9ydGVkQW5zd2VyVHlwZS5ERUNJTUFMOlxuICAgICAgcmV0dXJuIGFuc3dlci52YWx1ZURlY2ltYWw7XG4gICAgY2FzZSBTdXBwb3J0ZWRBbnN3ZXJUeXBlLkRBVEU6XG4gICAgICByZXR1cm4gYW5zd2VyLnZhbHVlRGF0ZTtcbiAgICBjYXNlIFN1cHBvcnRlZEFuc3dlclR5cGUuU1RSSU5HOlxuICAgICAgcmV0dXJuIGFuc3dlci52YWx1ZVN0cmluZztcbiAgICBjYXNlIFN1cHBvcnRlZEFuc3dlclR5cGUuQ09ESU5HOlxuICAgICAgcmV0dXJuIGFuc3dlci52YWx1ZUNvZGluZztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9ncmFtbWluZyBlcnJvciwgZm9yZ290IHRvIGFkZCBuZXcgU3VwcG9ydGVkQW5zd2VyVHlwZScpO1xuICB9XG59O1xuXG5jb25zdCBnZXRGaWVsZE5hbWVGb3JUeXBlID0gKHR5cGU6IHN0cmluZywgYW5zd2VyOiBRdWVzdGlvbm5haXJlUmVzcG9uc2VJdGVtQW5zd2VyKToga2V5b2YgUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFuc3dlciA9PiB7XG4gIGNvbnN0IGtleSA9IGB2YWx1ZSR7dHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSkudG9Mb3dlckNhc2UoKX1gO1xuXG4gIHJldHVybiBrZXkgYXMga2V5b2YgUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFuc3dlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBbnN3ZXJUeXBlID0gKGFuc3dlcjogUXVlc3Rpb25uYWlyZVJlc3BvbnNlSXRlbUFuc3dlcik6IGtleW9mIHR5cGVvZiBTdXBwb3J0ZWRBbnN3ZXJUeXBlID0+IHtcbiAgZm9yIChjb25zdCB0eXBlIGluIFN1cHBvcnRlZEFuc3dlclR5cGUpIHtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBnZXRGaWVsZE5hbWVGb3JUeXBlKHR5cGUsIGFuc3dlcik7XG4gICAgaWYgKGZpZWxkTmFtZSAmJiBhbnN3ZXJbZmllbGROYW1lXSkge1xuICAgICAgcmV0dXJuIHR5cGUgYXMga2V5b2YgdHlwZW9mIFN1cHBvcnRlZEFuc3dlclR5cGU7XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBhbnN3ZXIgc2V0LCBidXQgdXNpbmcgdW5zdXBwb3J0ZWQgdmFsdWUsIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiBbJHtPYmplY3QudmFsdWVzKFN1cHBvcnRlZEFuc3dlclR5cGUpLmpvaW4oJywgJyl9XWApO1xufTtcbiJdfQ==