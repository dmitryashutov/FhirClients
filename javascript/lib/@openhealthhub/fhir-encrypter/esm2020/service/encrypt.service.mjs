import { createMessage, encrypt, readKey } from 'openpgp';
export class EncryptService {
    async loadKey(key) {
        this.practitionerKey = key;
        this.key = await readKey({ armoredKey: key.publicKey });
    }
    async encrypt(value, key) {
        if (!this.key) {
            throw new Error('no key loaded, did you call loadKey?');
        }
        if (this.practitionerKey !== key) {
            throw new Error('trying to encrypt with incorrect key. Did you forget to call loadKey with the new key?');
        }
        const message = await createMessage({ text: value });
        return encrypt({ message, config: {}, encryptionKeys: this.key });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlL2VuY3J5cHQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsYUFBYSxFQUFFLE9BQU8sRUFBTyxPQUFPLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFHN0QsTUFBTSxPQUFPLGNBQWM7SUFJekIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFvQjtRQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLEVBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQWEsRUFBRSxHQUFvQjtRQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUN6RDtRQUVELElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxHQUFHLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3RkFBd0YsQ0FBQyxDQUFDO1NBQzNHO1FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztRQUVuRCxPQUFPLE9BQU8sQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZU1lc3NhZ2UsIGVuY3J5cHQsIEtleSwgcmVhZEtleX0gZnJvbSAnb3BlbnBncCc7XG5pbXBvcnQge1ByYWN0aXRpb25lcktleX0gZnJvbSAnLi4vbW9kZWxzL3ByYWN0aXRpb25lci1rZXknO1xuXG5leHBvcnQgY2xhc3MgRW5jcnlwdFNlcnZpY2Uge1xuICBwcml2YXRlIGtleT86IEtleTtcbiAgcHJpdmF0ZSBwcmFjdGl0aW9uZXJLZXk/OiBQcmFjdGl0aW9uZXJLZXk7XG5cbiAgYXN5bmMgbG9hZEtleShrZXk6IFByYWN0aXRpb25lcktleSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucHJhY3RpdGlvbmVyS2V5ID0ga2V5O1xuICAgIHRoaXMua2V5ID0gYXdhaXQgcmVhZEtleSh7YXJtb3JlZEtleToga2V5LnB1YmxpY0tleX0pO1xuICB9XG5cbiAgYXN5bmMgZW5jcnlwdCh2YWx1ZTogc3RyaW5nLCBrZXk6IFByYWN0aXRpb25lcktleSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLmtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBrZXkgbG9hZGVkLCBkaWQgeW91IGNhbGwgbG9hZEtleT8nKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcmFjdGl0aW9uZXJLZXkgIT09IGtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZW5jcnlwdCB3aXRoIGluY29ycmVjdCBrZXkuIERpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgbG9hZEtleSB3aXRoIHRoZSBuZXcga2V5PycpO1xuICAgIH1cblxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBjcmVhdGVNZXNzYWdlKHt0ZXh0OiB2YWx1ZX0pO1xuXG4gICAgcmV0dXJuIGVuY3J5cHQoe21lc3NhZ2UsIGNvbmZpZzoge30sIGVuY3J5cHRpb25LZXlzOiB0aGlzLmtleX0pO1xuICB9XG59XG4iXX0=