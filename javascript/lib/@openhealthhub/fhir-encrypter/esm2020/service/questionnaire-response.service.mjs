import _ from 'lodash';
import { getAnswerType, getValueForType } from '../models/supported-answer-type';
import { STRUCTURE_DEFINITION_URL } from '../util/fhir-constants';
export class QuestionnaireResponseService {
    constructor(encryptService, key) {
        this.encryptService = encryptService;
        this.key = key;
    }
    async createEncryptedResponse(originalResponse) {
        const response = _.cloneDeep(originalResponse);
        response.meta = response.meta ?? {};
        response.meta.profile = [`${STRUCTURE_DEFINITION_URL}EncryptedQuestionnaireResponse`];
        this.setPractitioner(response, this.key.practitioner);
        await this.encryptAnswers(response);
        return response;
    }
    async encryptAnswers(response) {
        const itemMap = {};
        await this.encryptItem(itemMap, response.item);
        await this.encryptAllAnswers(itemMap, response);
    }
    async encryptItem(itemMap, items = []) {
        await Promise.all(items.map(async (item) => {
            const answers = item.answer;
            if (answers && answers.length > 0) {
                await Promise.all(answers.map(async (answer) => {
                    await this.encryptAnswer(answer, item, itemMap);
                }));
            }
            await this.encryptItem(itemMap, item.item);
        }));
    }
    async encryptAnswer(answer, item, itemMap) {
        const answerType = getAnswerType(answer);
        const value = getValueForType(answer, answerType);
        const extensions = answer.extension ?? [];
        const codes = extensions.filter(ext => ext.url === `${STRUCTURE_DEFINITION_URL}question-answer-option-coding`)
            .filter(ext => !!ext.valueCoding)
            .map(ext => ext.valueCoding) ?? [];
        if (value) {
            const answerArray = item.linkId in itemMap ? itemMap[item.linkId] : [];
            const valueIsCode = typeof value !== 'string' && typeof value !== 'number';
            const actValue = valueIsCode ? undefined : value;
            const actualCodes = (valueIsCode ? [...codes, value] : codes);
            const encryptedObj = { value: actValue, codes: actualCodes };
            answerArray.push(encryptedObj);
            itemMap[item.linkId] = answerArray;
            await this.setEncryptedValue(answer, encryptedObj, answerType);
        }
    }
    async setEncryptedValue(answer, value, answerType) {
        const valueString = await this.encryptValue(value);
        switch (answerType) {
            case 'ATTACHMENT':
                answer.valueAttachment = this.createValueWithEncryptExtension(valueString, 'encrypted-attachment');
                return;
            case 'DATE':
                // eslint-disable-next-line no-underscore-dangle
                answer._valueDate = this.createValueWithEncryptExtension(valueString, 'encrypted-dateType');
                delete answer.valueDate;
                return;
            case 'DECIMAL':
                // @ts-expect-error: _valueDecimal should be present in FHIR types
                // eslint-disable-next-line no-underscore-dangle
                answer._valueDecimal = this.createValueWithEncryptExtension(valueString, 'encrypted-decimalType');
                delete answer.valueDecimal;
                return;
            case 'STRING':
                // eslint-disable-next-line no-underscore-dangle
                answer._valueString = this.createValueWithEncryptExtension(valueString, 'encrypted-stringType');
                delete answer.valueString;
                return;
            case 'CODING':
                answer.valueCoding = this.createValueWithEncryptExtension(valueString, 'encrypted-coding');
                return;
            default:
                throw new Error('unknown answerType');
        }
    }
    createValueWithEncryptExtension(valueString, extensionType) {
        return { extension: [{ url: STRUCTURE_DEFINITION_URL + extensionType, valueString }] };
    }
    async encryptAllAnswers(itemMap, response) {
        const allEncrypted = await this.encryptValue(itemMap);
        response.extension = [{ url: `${STRUCTURE_DEFINITION_URL}encryptedAnswers`, valueString: allEncrypted }];
    }
    async encryptValue(value) {
        return this.encryptService.encrypt(JSON.stringify(value), this.key);
    }
    setPractitioner(response, practitioner) {
        const contained = response.contained ?? [];
        contained.push(practitioner);
        response.contained = contained;
        response.author = { reference: `#${practitioner.id}` };
    }
}
//# sourceMappingURL=data:application/json;base64,