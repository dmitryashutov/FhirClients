{"version":3,"file":"openhealthhub-fhir-encrypter.mjs","sources":["../../src/lib/service/encrypt.service.ts","../../src/lib/util/fhir-constants.ts","../../src/lib/service/participant-key.service.ts","../../src/lib/models/supported-answer-type.ts","../../src/lib/service/questionnaire-response.service.ts","../../src/lib/encrypter.ts","../../src/lib/openhealthhub-fhir-encrypter.ts"],"sourcesContent":["import {createMessage, encrypt, Key, readKey} from 'openpgp';\nimport {PractitionerKey} from '../models/practitioner-key';\n\nexport class EncryptService {\n  private key?: Key;\n  private practitionerKey?: PractitionerKey;\n\n  async loadKey(key: PractitionerKey): Promise<void> {\n    this.practitionerKey = key;\n    this.key = await readKey({armoredKey: key.publicKey});\n  }\n\n  async encrypt(value: string, key: PractitionerKey): Promise<string> {\n    if (!this.key) {\n      throw new Error('no key loaded, did you call loadKey?');\n    }\n\n    if (this.practitionerKey !== key) {\n      throw new Error('trying to encrypt with incorrect key. Did you forget to call loadKey with the new key?');\n    }\n\n    const message = await createMessage({text: value});\n\n    return encrypt({message, config: {}, encryptionKeys: this.key});\n  }\n}\n","export const STRUCTURE_DEFINITION_URL = 'https://api.openhealthhub.com/OpenHealthhub/fhir/4/StructureDefinition/';\nexport const CODE_SYSTEM_URL = 'https://api.openhealthhub.com/OpenHealthhub/fhir/4/CodeSystem/';\n","import {Practitioner} from 'fhir/r4';\nimport {PractitionerKey} from '../models/practitioner-key';\nimport {STRUCTURE_DEFINITION_URL} from '../util/fhir-constants';\n\nexport const PARTICIPANT_PUBLIC_KEY_UUID_SYSTEM = 'urn:ietf:rfc:3986';\nexport const PARTICIPANT_PUBLIC_KEY_URL = `${STRUCTURE_DEFINITION_URL}participant-program-public-key`;\n\nexport class ParticipantKeyService {\n  toParticipantKey(practitioner: Practitioner): PractitionerKey {\n    if (!practitioner.id) {\n      throw new Error('public key resource author should have an id');\n    }\n\n    const keyUuid = practitioner.identifier?.find(i => i.system === PARTICIPANT_PUBLIC_KEY_UUID_SYSTEM)?.value;\n    if (!keyUuid) {\n      throw new Error('public key resource author should contain a key uuid as identifier');\n    }\n\n    const publicKey = practitioner.extension?.find(ext => ext.url === PARTICIPANT_PUBLIC_KEY_URL)?.valueString;\n    if (!publicKey) {\n      throw new Error('public key resource should have an extension containing the actual public key value');\n    }\n\n    return {\n      keyUuid,\n      practitioner,\n      publicKey,\n      userUuid: practitioner.id\n    };\n  }\n}\n","import {Coding, QuestionnaireResponseItemAnswer} from 'fhir/r4';\n\nexport enum SupportedAnswerType {\n  STRING = 'STRING',\n  DECIMAL = 'DECIMAL',\n  DATE = 'DATE',\n  ATTACHMENT = 'ATTACHMENT',\n  CODING = 'CODING',\n}\n\nexport const getValueForType = (answer: QuestionnaireResponseItemAnswer,\n                                typeString: keyof typeof SupportedAnswerType): string | number | Coding | undefined => {\n  const type = SupportedAnswerType[typeString];\n  switch (type) {\n    case SupportedAnswerType.ATTACHMENT:\n      return answer.valueAttachment?.data;\n    case SupportedAnswerType.DECIMAL:\n      return answer.valueDecimal;\n    case SupportedAnswerType.DATE:\n      return answer.valueDate;\n    case SupportedAnswerType.STRING:\n      return answer.valueString;\n    case SupportedAnswerType.CODING:\n      return answer.valueCoding;\n    default:\n      throw new Error('programming error, forgot to add new SupportedAnswerType');\n  }\n};\n\nconst getFieldNameForType = (type: string, answer: QuestionnaireResponseItemAnswer): keyof QuestionnaireResponseItemAnswer => {\n  const key = `value${type.charAt(0).toUpperCase() + type.slice(1).toLowerCase()}`;\n\n  return key as keyof QuestionnaireResponseItemAnswer;\n};\n\nexport const getAnswerType = (answer: QuestionnaireResponseItemAnswer): keyof typeof SupportedAnswerType => {\n  for (const type in SupportedAnswerType) {\n    const fieldName = getFieldNameForType(type, answer);\n    if (fieldName && answer[fieldName]) {\n      return type as keyof typeof SupportedAnswerType;\n    }\n  }\n\n  throw new Error(`answer set, but using unsupported value, supported values are: [${Object.values(SupportedAnswerType).join(', ')}]`);\n};\n","import {\n  BackboneElement,\n  Coding,\n  Extension,\n  Practitioner,\n  QuestionnaireResponse,\n  QuestionnaireResponseItem,\n  QuestionnaireResponseItemAnswer\n} from 'fhir/r4';\nimport _ from 'lodash';\nimport {EncryptedQuestionAnswer} from '../models/encrypted-question-answer';\nimport {PractitionerKey} from '../models/practitioner-key';\nimport {getAnswerType, getValueForType, SupportedAnswerType} from '../models/supported-answer-type';\nimport {STRUCTURE_DEFINITION_URL} from '../util/fhir-constants';\nimport {EncryptService} from './encrypt.service';\n\nexport class QuestionnaireResponseService {\n  constructor(private readonly encryptService: EncryptService, private readonly key: PractitionerKey) {}\n\n  async createEncryptedResponse(originalResponse: QuestionnaireResponse): Promise<QuestionnaireResponse> {\n    const response = _.cloneDeep(originalResponse);\n\n    response.meta = response.meta ?? {};\n    response.meta.profile = [`${STRUCTURE_DEFINITION_URL}EncryptedQuestionnaireResponse`];\n\n    this.setPractitioner(response, this.key.practitioner);\n\n    await this.encryptAnswers(response);\n\n    return response;\n  }\n\n  private async encryptAnswers(response: QuestionnaireResponse): Promise<void> {\n    const itemMap: Record<string, EncryptedQuestionAnswer[]> = {};\n\n    await this.encryptItem(itemMap, response.item);\n\n    await this.encryptAllAnswers(itemMap, response);\n  }\n\n  private async encryptItem(itemMap: Record<string, EncryptedQuestionAnswer[]>, items: QuestionnaireResponseItem[] = []): Promise<void> {\n    await Promise.all(items.map(async item => {\n      const answers = item.answer;\n      if (answers && answers.length > 0) {\n        await Promise.all(answers.map(async answer => {\n          await this.encryptAnswer(answer, item, itemMap);\n        }));\n      }\n\n      await this.encryptItem(itemMap, item.item);\n    }));\n  }\n\n  private async encryptAnswer(answer: QuestionnaireResponseItemAnswer, item: QuestionnaireResponseItem,\n                              itemMap: Record<string, EncryptedQuestionAnswer[]>): Promise<void> {\n    const answerType = getAnswerType(answer);\n    const value = getValueForType(answer, answerType);\n    const extensions: Extension[] = answer.extension ?? [];\n    const codes = extensions.filter(ext => ext.url === `${STRUCTURE_DEFINITION_URL}question-answer-option-coding`)\n      .filter(ext => !!ext.valueCoding)\n      .map(ext => ext.valueCoding) ?? [];\n\n    if (value) {\n      const answerArray = item.linkId in itemMap ? itemMap[item.linkId] : [];\n      const valueIsCode = typeof value !== 'string' && typeof value !== 'number';\n      const actValue = valueIsCode ? undefined : value;\n      const actualCodes = (valueIsCode ? [...codes, value] : codes) as Coding[];\n      const encryptedObj = {value: actValue, codes: actualCodes};\n      answerArray.push(encryptedObj);\n      itemMap[item.linkId] = answerArray;\n\n      await this.setEncryptedValue(answer, encryptedObj, answerType);\n    }\n  }\n\n  private async setEncryptedValue(answer: QuestionnaireResponseItemAnswer, value: EncryptedQuestionAnswer,\n                                  answerType: keyof typeof SupportedAnswerType): Promise<void> {\n    const valueString = await this.encryptValue(value);\n    switch (answerType) {\n      case 'ATTACHMENT':\n        answer.valueAttachment = this.createValueWithEncryptExtension(valueString, 'encrypted-attachment');\n\n        return;\n      case 'DATE':\n        // eslint-disable-next-line no-underscore-dangle\n        answer._valueDate = this.createValueWithEncryptExtension(valueString, 'encrypted-dateType');\n        delete answer.valueDate;\n\n        return;\n      case 'DECIMAL':\n        // @ts-expect-error: _valueDecimal should be present in FHIR types\n        // eslint-disable-next-line no-underscore-dangle\n        answer._valueDecimal = this.createValueWithEncryptExtension(valueString, 'encrypted-decimalType');\n        delete answer.valueDecimal;\n\n        return;\n      case 'STRING':\n        // eslint-disable-next-line no-underscore-dangle\n        answer._valueString = this.createValueWithEncryptExtension(valueString, 'encrypted-stringType');\n        delete answer.valueString;\n\n        return;\n      case 'CODING':\n        answer.valueCoding = this.createValueWithEncryptExtension(valueString, 'encrypted-coding');\n\n        return;\n      default:\n        throw new Error('unknown answerType');\n    }\n  }\n\n  private createValueWithEncryptExtension(valueString: string, extensionType: string): BackboneElement {\n    return {extension: [{url: STRUCTURE_DEFINITION_URL + extensionType, valueString}]};\n  }\n\n  private async encryptAllAnswers(itemMap: Record<string, EncryptedQuestionAnswer[]>, response: QuestionnaireResponse): Promise<void> {\n    const allEncrypted = await this.encryptValue(itemMap);\n    response.extension = [{url: `${STRUCTURE_DEFINITION_URL}encryptedAnswers`, valueString: allEncrypted}];\n  }\n\n  private async encryptValue(value: object): Promise<string> {\n    return this.encryptService.encrypt(JSON.stringify(value), this.key);\n  }\n\n  private setPractitioner(response: QuestionnaireResponse, practitioner: Practitioner): void {\n    const contained = response.contained ?? [];\n    contained.push(practitioner);\n    response.contained = contained;\n    response.author = {reference: `#${practitioner.id as string}`};\n  }\n}\n","import {Bundle, BundleEntry, Practitioner, QuestionnaireResponse} from 'fhir/r4';\nimport {EncryptService} from './service/encrypt.service';\nimport {ParticipantKeyService} from './service/participant-key.service';\nimport {QuestionnaireResponseService} from './service/questionnaire-response.service';\n\nexport async function encryptQuestionnaireResponse(response: Readonly<QuestionnaireResponse>,\n                                                   practitioners: Practitioner[] = []): Promise<Bundle> {\n  const bundle: Bundle = {resourceType: 'Bundle', type: 'transaction'};\n  bundle.entry = await Promise.all(practitioners.map(async practitioner => {\n    const entry: BundleEntry = {};\n    entry.resource = await encryptForKey(response, practitioner);\n\n    return entry;\n  }));\n\n  return bundle;\n}\n\nconst encryptForKey = async (response: Readonly<QuestionnaireResponse>, practitioner: Practitioner): Promise<QuestionnaireResponse> => {\n  const key = new ParticipantKeyService().toParticipantKey(practitioner);\n  const encryptService = new EncryptService();\n  await encryptService.loadKey(key);\n  const qrService = new QuestionnaireResponseService(encryptService, key);\n\n  return qrService.createEncryptedResponse(response);\n};\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}